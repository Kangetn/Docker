version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    # Reinicia el contenedor automáticamente si falla
    restart: always
    # Mapea el puerto interno 5678 del contenedor al puerto 5678 del LXC host.
    # El Nginx Proxy Manager se conectará a este puerto.
    ports:
      - "5678:5678"

    # Variables de entorno con las soluciones que hemos discutido
    environment:
      # Configuración de la base de datos PostgreSQL
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-admin}
      # ¡IMPORTANTE! Cambia esta contraseña por una segura y única
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-23827372}

      # Configuración para el Reverse Proxy (Nginx Proxy Manager)
      # N8N_HOST debe ser tu URL de DuckDNS con HTTPS
      - N8N_HOST=localhost
      # El protocolo que el usuario final usa para acceder
      - N8N_PROTOCOL=https
      # WEBHOOK_URL es la URL completa que Telegram y otros servicios externos usarán
      - WEBHOOK_URL=https://localhost:5678/
      - N8N_PATH=/
      # N8N_PUSH_BACKEND=sse es un fallback para problemas de WebSocket con algunos proxies
      - N8N_PUSH_BACKEND=sse
      - N8N_SECURE_COOKIE=false
      # Recomendaciones de los logs de n8n para el futuro
      - NBN_RUNNERS_ENABLED=true
      - NBN_ENFORCE_SETTINGS_FILE_PERMISSIONS=true

      # Ajusta esto a tu zona horaria para que los cron jobs y fechas sean correctos
      - GENERIC_TIMEZONE=America/Bogota
      - N8N_PUSH_BACKEND=websocket
      - N8N_POLL_TIMES=10 # Ajusta el intervalo de polling, 10 segundos por defecto
      - N8N_POLL_BACKOFF=30
    # Monta un volumen persistente para los datos de n8n (workflows, credenciales, etc.)
    volumes:
      - n8n_data:/home/node/.n8n

    # Asegura que la base de datos se inicie antes que n8n
    depends_on:
      - n8n_postgres

  n8n_postgres:
    # Imagen de PostgreSQL, versión 15
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      # ¡IMPORTANTE! La misma contraseña que usaste arriba
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-23827372}
    # Monta un volumen para los datos de la base de datos, ¡crítico para la persistencia!
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data
# Define los volúmenes para que Docker los gestione y persistan los datos
volumes:
  n8n_data:
  n8n_postgres_data: